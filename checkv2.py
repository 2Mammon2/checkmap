import os
import sys
import time

# Ki·ªÉm tra n·∫øu kh√¥ng ph·∫£i Windows th√¨ tho√°t
if os.name != "nt":
    print("‚ö†Ô∏è Tool n√†y ch·ªâ ch·∫°y tr√™n Windows!")
    input("\nNh·∫•n Enter ƒë·ªÉ tho√°t...")
    sys.exit()

# Danh s√°ch th∆∞ vi·ªán c·∫ßn c√†i ƒë·∫∑t
REQUIRED_LIBRARIES = ["opencv-python", "numpy", "pyautogui", "mss"]

# H√†m ki·ªÉm tra & c√†i ƒë·∫∑t th∆∞ vi·ªán t·ª± ƒë·ªông
def install_missing_libraries():
    for lib in REQUIRED_LIBRARIES:
        try:
            __import__(lib.split('-')[0])  # Ki·ªÉm tra n·∫øu th∆∞ vi·ªán ƒë√£ ƒë∆∞·ª£c import
        except ImportError:
            print(f"üìå C√†i ƒë·∫∑t th∆∞ vi·ªán {lib} ...")
            os.system(f'pip install {lib}')  # C√†i ƒë·∫∑t th∆∞ vi·ªán

# G·ªçi h√†m ƒë·ªÉ c√†i ƒë·∫∑t th∆∞ vi·ªán n·∫øu thi·∫øu
install_missing_libraries()

# Import l·∫°i sau khi c√†i ƒë·∫∑t
import cv2
import numpy as np
import pyautogui
import mss

# L·∫•y ƒë∆∞·ªùng d·∫´n th∆∞ m·ª•c th·ª±c thi tr√™n Windows
BASE_DIR = os.path.dirname(os.path.abspath(sys.argv[0]))

# ƒê·ªãnh nghƒ©a th∆∞ m·ª•c ch·ª©a ·∫£nh m·∫´u
TEMPLATE_FOLDER = os.path.join(BASE_DIR, "templates")

# H√†m t√¨m file ·∫£nh ƒë·∫ßu ti√™n trong th∆∞ m·ª•c
def get_template_image():
    if not os.path.exists(TEMPLATE_FOLDER):
        print(f"‚ùå L·ªñI: Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c {TEMPLATE_FOLDER}")
        input("\nNh·∫•n Enter ƒë·ªÉ tho√°t...")
        sys.exit()

    # L·∫•y danh s√°ch file ·∫£nh trong th∆∞ m·ª•c
    image_files = [f for f in os.listdir(TEMPLATE_FOLDER) if f.lower().endswith((".png", ".jpg", ".jpeg"))]

    if not image_files:
        print(f"‚ùå L·ªñI: Kh√¥ng t√¨m th·∫•y file ·∫£nh trong th∆∞ m·ª•c {TEMPLATE_FOLDER}")
        input("\nNh·∫•n Enter ƒë·ªÉ tho√°t...")
        sys.exit()

    return os.path.join(TEMPLATE_FOLDER, image_files[0])

# L·∫•y ƒë∆∞·ªùng d·∫´n file ·∫£nh ƒë·∫ßu ti√™n trong th∆∞ m·ª•c
TEMPLATE_IMAGE = get_template_image()

# Ng∆∞·ª°ng nh·∫≠n di·ªán
THRESHOLD = 0.8

# Danh s√°ch t√™n c√°c v·∫≠t th·ªÉ trong spritesheet
OBJECT_NAMES = ["Gold Chest", "Purple Chest", "Mob"]

# Ch·ª•p ·∫£nh m√†n h√¨nh
def capture_screen():
    with mss.mss() as sct:
        screenshot = sct.grab(sct.monitors[1])  # Ch·ª•p to√†n m√†n h√¨nh
        img = np.array(screenshot)  # Chuy·ªÉn th√†nh numpy array
        img = cv2.cvtColor(img, cv2.COLOR_BGRA2BGR)  # Chuy·ªÉn ƒë·ªïi m√†u
        return img

# T√¨m r∆∞∆°ng & qu√°i tr√™n m√†n h√¨nh
def find_objects():
    screen = capture_screen()

    if not os.path.exists(TEMPLATE_IMAGE):
        print(f"‚ùå L·ªñI: Kh√¥ng t√¨m th·∫•y file {TEMPLATE_IMAGE}")
        return {}

    template = cv2.imread(TEMPLATE_IMAGE, cv2.IMREAD_UNCHANGED)

    if template is None:
        print(f"‚ùå L·ªñI: Kh√¥ng th·ªÉ ƒë·ªçc file {TEMPLATE_IMAGE}")
        return {}

    # D√πng OpenCV matchTemplate ƒë·ªÉ t√¨m ƒë·ªëi t∆∞·ª£ng
    result = cv2.matchTemplate(screen, template, cv2.TM_CCOEFF_NORMED)
    locations = np.where(result >= THRESHOLD)

    # ƒê·∫øm t·ª´ng lo·∫°i r∆∞∆°ng/qu√°i v·∫≠t
    object_counts = {name: 0 for name in OBJECT_NAMES}

    for i, pt in enumerate(zip(*locations[::-1])):
        obj_index = i % len(OBJECT_NAMES)  # X√°c ƒë·ªãnh lo·∫°i object theo th·ª© t·ª±
        obj_name = OBJECT_NAMES[obj_index]
        object_counts[obj_name] += 1

        # V·∫Ω h√¨nh ch·ªØ nh·∫≠t quanh ƒë·ªëi t∆∞·ª£ng
        cv2.rectangle(screen, pt, (pt[0] + template.shape[1], pt[1] + template.shape[0]), (0, 255, 0), 2)

    # Hi·ªÉn th·ªã k·∫øt qu·∫£
    cv2.imshow("Dungeon Scanner", screen)
    cv2.waitKey(500)
    cv2.destroyAllWindows()

    return object_counts

# Ch·∫°y tool li√™n t·ª•c
while True:
    detected_objects = find_objects()

    if detected_objects:
        print("\nüì¶ R∆Ø∆†NG & QU√ÅI V·∫¨T:")
        for obj, count in detected_objects.items():
            print(f"- {obj}: {count}")

    time.sleep(5)
