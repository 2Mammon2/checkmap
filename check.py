import os
import cv2
import numpy as np
import pyautogui
import mss
import time

# ƒê·ªãnh nghƒ©a th∆∞ m·ª•c ch·ª©a ·∫£nh m·∫´u
TEMPLATE_FOLDER = os.path.join(os.path.dirname(__file__), "templates")  # Th∆∞ m·ª•c ch·ª©a spritesheet

# H√†m t√¨m file ·∫£nh ƒë·∫ßu ti√™n trong th∆∞ m·ª•c
def get_template_image():
    if not os.path.exists(TEMPLATE_FOLDER):
        print(f"L·ªñI: Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c {TEMPLATE_FOLDER}")
        return None

    # L·∫•y danh s√°ch t·∫•t c·∫£ file ·∫£nh trong th∆∞ m·ª•c (PNG, JPG, JPEG)
    image_files = [f for f in os.listdir(TEMPLATE_FOLDER) if f.endswith((".png", ".jpg", ".jpeg"))]

    if not image_files:
        print(f"L·ªñI: Kh√¥ng t√¨m th·∫•y file ·∫£nh trong th∆∞ m·ª•c {TEMPLATE_FOLDER}")
        return None

    # Ch·ªçn file ƒë·∫ßu ti√™n trong th∆∞ m·ª•c
    return os.path.join(TEMPLATE_FOLDER, image_files[0])

# L·∫•y ƒë∆∞·ªùng d·∫´n file ·∫£nh ƒë·∫ßu ti√™n trong th∆∞ m·ª•c
TEMPLATE_IMAGE = get_template_image()

if TEMPLATE_IMAGE is None:
    exit()  # Tho√°t ch∆∞∆°ng tr√¨nh n·∫øu kh√¥ng t√¨m th·∫•y ·∫£nh m·∫´u

# Ng∆∞·ª°ng nh·∫≠n di·ªán (tƒÉng l√™n n·∫øu bot nh·∫≠n di·ªán sai)
THRESHOLD = 0.8

# Danh s√°ch t√™n c√°c v·∫≠t th·ªÉ theo th·ª© t·ª± trong spritesheet
OBJECT_NAMES = ["Gold Chest", "Purple Chest", "Mob"]

# Ch·ª•p ·∫£nh m√†n h√¨nh
def capture_screen():
    with mss.mss() as sct:
        screenshot = sct.grab(sct.monitors[1])  # Ch·ª•p to√†n m√†n h√¨nh
        img = np.array(screenshot)  # Chuy·ªÉn th√†nh numpy array
        img = cv2.cvtColor(img, cv2.COLOR_BGRA2BGR)  # Chuy·ªÉn ƒë·ªïi m√†u
        return img

# T√¨m t·∫•t c·∫£ r∆∞∆°ng & qu√°i v·∫≠t tr√™n m√†n h√¨nh
def find_objects():
    screen = capture_screen()

    # Ki·ªÉm tra n·∫øu file ·∫£nh b·ªã l·ªói
    if not os.path.exists(TEMPLATE_IMAGE):
        print(f"L·ªñI: Kh√¥ng t√¨m th·∫•y file {TEMPLATE_IMAGE}")
        return {}

    template = cv2.imread(TEMPLATE_IMAGE, cv2.IMREAD_UNCHANGED)

    if template is None:
        print(f"L·ªñI: Kh√¥ng th·ªÉ ƒë·ªçc file {TEMPLATE_IMAGE}")
        return {}

    # S·ª≠ d·ª•ng matchTemplate ƒë·ªÉ t√¨m t·∫•t c·∫£ ƒë·ªëi t∆∞·ª£ng t·ª´ ·∫£nh t·ªïng h·ª£p
    result = cv2.matchTemplate(screen, template, cv2.TM_CCOEFF_NORMED)
    locations = np.where(result >= THRESHOLD)

    # ƒê·∫øm t·ª´ng lo·∫°i r∆∞∆°ng/qu√°i d·ª±a tr√™n v·ªã tr√≠ trong spritesheet
    object_counts = {name: 0 for name in OBJECT_NAMES}

    for i, pt in enumerate(zip(*locations[::-1])):
        obj_index = i % len(OBJECT_NAMES)  # X√°c ƒë·ªãnh lo·∫°i object theo th·ª© t·ª± trong spritesheet
        obj_name = OBJECT_NAMES[obj_index]
        object_counts[obj_name] += 1

        # V·∫Ω h√¨nh ch·ªØ nh·∫≠t quanh ƒë·ªëi t∆∞·ª£ng
        cv2.rectangle(screen, pt, (pt[0] + template.shape[1], pt[1] + template.shape[0]), (0, 255, 0), 2)

    # Hi·ªÉn th·ªã k·∫øt qu·∫£
    cv2.imshow("Dungeon Scanner", screen)
    cv2.waitKey(500)  # Hi·ªÉn th·ªã 0.5s, sau ƒë√≥ ti·∫øp t·ª•c qu√©t
    cv2.destroyAllWindows()

    return object_counts

# Ch·∫°y bot li√™n t·ª•c
while True:
    detected_objects = find_objects()

    if detected_objects:
        print("\nüì¶ R∆Ø∆†NG & QU√ÅI V·∫¨T:")
        for obj, count in detected_objects.items():
            print(f"- {obj}: {count}")

    # ƒê·ª£i 5 gi√¢y r·ªìi qu√©t l·∫°i
    time.sleep(5)
